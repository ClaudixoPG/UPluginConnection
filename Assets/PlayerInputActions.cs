//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.0
//     from Assets/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/PlayerInputActions.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""SpaceShipMinigame"",
            ""id"": ""c1a7c4c3-45d8-4632-8423-57df7e96b09e"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""a9b7c2e4-561c-4b7b-8e15-f7bb23123d0e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""c137f6b2-2ab7-4f9b-81c4-4b54f1c4ad33"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shield"",
                    ""type"": ""Button"",
                    ""id"": ""bb6e95fc-2a62-4bda-8a36-879a12a14551"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeWeapon1"",
                    ""type"": ""Button"",
                    ""id"": ""f8ec2b2d-6a7e-4bc8-b3d3-3a0c9379ec5b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeWeapon2"",
                    ""type"": ""Button"",
                    ""id"": ""8f91a13a-5a62-4973-9d46-9fbaf04de9cd"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeWeapon3"",
                    ""type"": ""Button"",
                    ""id"": ""a7c872ab-df47-4fbc-8f48-930d29599a54"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""16e9f3b1-13d3-44f4-9c10-f86b28c2d509"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e6b8b68c-9d4a-469a-b850-d7d33fef8a35"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""8c17bb54-93b3-4a94-9b5a-fae517cd8e55"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c94e1c4a-9010-4a0d-8cf2-1cf8c73e86aa"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d7e2b7ff-5ac8-4e3d-9c7a-1d227becc891"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""5f7afde7-4319-4f5a-8ff1-18456a5b9a4e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e7d2c8a6-3f53-4571-9c91-9e2388f5f67c"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""cdcfb57c-4af4-4b28-9432-b42cf3a2875a"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""db7e7de7-fb3a-4748-91f0-56db46dbe13a"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""1a1d6f2c-d8ed-47b0-a93c-c5a9832cb3d2"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e60adeba-f265-402a-83a0-cd56f43dce64"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a22e165b-8748-476f-a1d8-7f527f7ebc4e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""87751275-089a-4695-8000-a2a4d9fc2575"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""40b3a7f4-676a-4e63-b884-0ad81d3c19f2"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shield"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c5df94d3-0984-40c9-b272-08c1dcffa452"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shield"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ccba9b54-7a7e-414c-a9a6-51564f62669e"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeWeapon1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e46e1e4f-fba6-4657-b4f1-66e0ab609090"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeWeapon2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4a84a393-5ec3-4c7f-8fc3-5125a2a77eb8"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeWeapon3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""RythmGame"",
            ""id"": ""713bbf39-40b4-4f7c-a6f0-cc2f17ede7e3"",
            ""actions"": [
                {
                    ""name"": ""Y_Button"",
                    ""type"": ""Button"",
                    ""id"": ""125b3937-7ff2-47e0-9f28-3a98c0b1199e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""A_Button"",
                    ""type"": ""Button"",
                    ""id"": ""a0124ae7-1e34-428b-afd6-5c483eac5ab7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""X_Button"",
                    ""type"": ""Button"",
                    ""id"": ""51e53f52-0434-4658-a422-2ee214459136"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""B_Button"",
                    ""type"": ""Button"",
                    ""id"": ""07f89a68-1709-4747-9ea1-ef0e4eefe8db"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7f8870f2-9ba9-4339-8320-67465d3023e9"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Y_Button"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8526bb4c-1dfb-403c-9f53-3e84af86719a"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Y_Button"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d7fbe3c1-00ca-423b-b488-ff96f3be1314"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""A_Button"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cab96c90-414e-4947-b7ac-7691b6c50f63"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""A_Button"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""66518916-76fb-45cc-b89a-4b97a8afdafb"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""X_Button"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eed37b61-542b-4ac3-b236-b021cf13fa30"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""X_Button"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f001485a-4c5e-43af-8ca1-c204f44c04a9"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""B_Button"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""04d2e59c-cd28-4fe1-a6bc-bf6b8e88b07a"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""B_Button"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // SpaceShipMinigame
        m_SpaceShipMinigame = asset.FindActionMap("SpaceShipMinigame", throwIfNotFound: true);
        m_SpaceShipMinigame_Move = m_SpaceShipMinigame.FindAction("Move", throwIfNotFound: true);
        m_SpaceShipMinigame_Fire = m_SpaceShipMinigame.FindAction("Fire", throwIfNotFound: true);
        m_SpaceShipMinigame_Shield = m_SpaceShipMinigame.FindAction("Shield", throwIfNotFound: true);
        m_SpaceShipMinigame_ChangeWeapon1 = m_SpaceShipMinigame.FindAction("ChangeWeapon1", throwIfNotFound: true);
        m_SpaceShipMinigame_ChangeWeapon2 = m_SpaceShipMinigame.FindAction("ChangeWeapon2", throwIfNotFound: true);
        m_SpaceShipMinigame_ChangeWeapon3 = m_SpaceShipMinigame.FindAction("ChangeWeapon3", throwIfNotFound: true);
        // RythmGame
        m_RythmGame = asset.FindActionMap("RythmGame", throwIfNotFound: true);
        m_RythmGame_Y_Button = m_RythmGame.FindAction("Y_Button", throwIfNotFound: true);
        m_RythmGame_A_Button = m_RythmGame.FindAction("A_Button", throwIfNotFound: true);
        m_RythmGame_X_Button = m_RythmGame.FindAction("X_Button", throwIfNotFound: true);
        m_RythmGame_B_Button = m_RythmGame.FindAction("B_Button", throwIfNotFound: true);
    }

    ~@PlayerInputActions()
    {
        UnityEngine.Debug.Assert(!m_SpaceShipMinigame.enabled, "This will cause a leak and performance issues, PlayerInputActions.SpaceShipMinigame.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_RythmGame.enabled, "This will cause a leak and performance issues, PlayerInputActions.RythmGame.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SpaceShipMinigame
    private readonly InputActionMap m_SpaceShipMinigame;
    private List<ISpaceShipMinigameActions> m_SpaceShipMinigameActionsCallbackInterfaces = new List<ISpaceShipMinigameActions>();
    private readonly InputAction m_SpaceShipMinigame_Move;
    private readonly InputAction m_SpaceShipMinigame_Fire;
    private readonly InputAction m_SpaceShipMinigame_Shield;
    private readonly InputAction m_SpaceShipMinigame_ChangeWeapon1;
    private readonly InputAction m_SpaceShipMinigame_ChangeWeapon2;
    private readonly InputAction m_SpaceShipMinigame_ChangeWeapon3;
    /// <summary>
    /// Provides access to input actions defined in input action map "SpaceShipMinigame".
    /// </summary>
    public struct SpaceShipMinigameActions
    {
        private @PlayerInputActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public SpaceShipMinigameActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "SpaceShipMinigame/Move".
        /// </summary>
        public InputAction @Move => m_Wrapper.m_SpaceShipMinigame_Move;
        /// <summary>
        /// Provides access to the underlying input action "SpaceShipMinigame/Fire".
        /// </summary>
        public InputAction @Fire => m_Wrapper.m_SpaceShipMinigame_Fire;
        /// <summary>
        /// Provides access to the underlying input action "SpaceShipMinigame/Shield".
        /// </summary>
        public InputAction @Shield => m_Wrapper.m_SpaceShipMinigame_Shield;
        /// <summary>
        /// Provides access to the underlying input action "SpaceShipMinigame/ChangeWeapon1".
        /// </summary>
        public InputAction @ChangeWeapon1 => m_Wrapper.m_SpaceShipMinigame_ChangeWeapon1;
        /// <summary>
        /// Provides access to the underlying input action "SpaceShipMinigame/ChangeWeapon2".
        /// </summary>
        public InputAction @ChangeWeapon2 => m_Wrapper.m_SpaceShipMinigame_ChangeWeapon2;
        /// <summary>
        /// Provides access to the underlying input action "SpaceShipMinigame/ChangeWeapon3".
        /// </summary>
        public InputAction @ChangeWeapon3 => m_Wrapper.m_SpaceShipMinigame_ChangeWeapon3;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_SpaceShipMinigame; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="SpaceShipMinigameActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(SpaceShipMinigameActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="SpaceShipMinigameActions" />
        public void AddCallbacks(ISpaceShipMinigameActions instance)
        {
            if (instance == null || m_Wrapper.m_SpaceShipMinigameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SpaceShipMinigameActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Fire.started += instance.OnFire;
            @Fire.performed += instance.OnFire;
            @Fire.canceled += instance.OnFire;
            @Shield.started += instance.OnShield;
            @Shield.performed += instance.OnShield;
            @Shield.canceled += instance.OnShield;
            @ChangeWeapon1.started += instance.OnChangeWeapon1;
            @ChangeWeapon1.performed += instance.OnChangeWeapon1;
            @ChangeWeapon1.canceled += instance.OnChangeWeapon1;
            @ChangeWeapon2.started += instance.OnChangeWeapon2;
            @ChangeWeapon2.performed += instance.OnChangeWeapon2;
            @ChangeWeapon2.canceled += instance.OnChangeWeapon2;
            @ChangeWeapon3.started += instance.OnChangeWeapon3;
            @ChangeWeapon3.performed += instance.OnChangeWeapon3;
            @ChangeWeapon3.canceled += instance.OnChangeWeapon3;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="SpaceShipMinigameActions" />
        private void UnregisterCallbacks(ISpaceShipMinigameActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Fire.started -= instance.OnFire;
            @Fire.performed -= instance.OnFire;
            @Fire.canceled -= instance.OnFire;
            @Shield.started -= instance.OnShield;
            @Shield.performed -= instance.OnShield;
            @Shield.canceled -= instance.OnShield;
            @ChangeWeapon1.started -= instance.OnChangeWeapon1;
            @ChangeWeapon1.performed -= instance.OnChangeWeapon1;
            @ChangeWeapon1.canceled -= instance.OnChangeWeapon1;
            @ChangeWeapon2.started -= instance.OnChangeWeapon2;
            @ChangeWeapon2.performed -= instance.OnChangeWeapon2;
            @ChangeWeapon2.canceled -= instance.OnChangeWeapon2;
            @ChangeWeapon3.started -= instance.OnChangeWeapon3;
            @ChangeWeapon3.performed -= instance.OnChangeWeapon3;
            @ChangeWeapon3.canceled -= instance.OnChangeWeapon3;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="SpaceShipMinigameActions.UnregisterCallbacks(ISpaceShipMinigameActions)" />.
        /// </summary>
        /// <seealso cref="SpaceShipMinigameActions.UnregisterCallbacks(ISpaceShipMinigameActions)" />
        public void RemoveCallbacks(ISpaceShipMinigameActions instance)
        {
            if (m_Wrapper.m_SpaceShipMinigameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="SpaceShipMinigameActions.AddCallbacks(ISpaceShipMinigameActions)" />
        /// <seealso cref="SpaceShipMinigameActions.RemoveCallbacks(ISpaceShipMinigameActions)" />
        /// <seealso cref="SpaceShipMinigameActions.UnregisterCallbacks(ISpaceShipMinigameActions)" />
        public void SetCallbacks(ISpaceShipMinigameActions instance)
        {
            foreach (var item in m_Wrapper.m_SpaceShipMinigameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SpaceShipMinigameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="SpaceShipMinigameActions" /> instance referencing this action map.
    /// </summary>
    public SpaceShipMinigameActions @SpaceShipMinigame => new SpaceShipMinigameActions(this);

    // RythmGame
    private readonly InputActionMap m_RythmGame;
    private List<IRythmGameActions> m_RythmGameActionsCallbackInterfaces = new List<IRythmGameActions>();
    private readonly InputAction m_RythmGame_Y_Button;
    private readonly InputAction m_RythmGame_A_Button;
    private readonly InputAction m_RythmGame_X_Button;
    private readonly InputAction m_RythmGame_B_Button;
    /// <summary>
    /// Provides access to input actions defined in input action map "RythmGame".
    /// </summary>
    public struct RythmGameActions
    {
        private @PlayerInputActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public RythmGameActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "RythmGame/Y_Button".
        /// </summary>
        public InputAction @Y_Button => m_Wrapper.m_RythmGame_Y_Button;
        /// <summary>
        /// Provides access to the underlying input action "RythmGame/A_Button".
        /// </summary>
        public InputAction @A_Button => m_Wrapper.m_RythmGame_A_Button;
        /// <summary>
        /// Provides access to the underlying input action "RythmGame/X_Button".
        /// </summary>
        public InputAction @X_Button => m_Wrapper.m_RythmGame_X_Button;
        /// <summary>
        /// Provides access to the underlying input action "RythmGame/B_Button".
        /// </summary>
        public InputAction @B_Button => m_Wrapper.m_RythmGame_B_Button;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_RythmGame; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="RythmGameActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(RythmGameActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="RythmGameActions" />
        public void AddCallbacks(IRythmGameActions instance)
        {
            if (instance == null || m_Wrapper.m_RythmGameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RythmGameActionsCallbackInterfaces.Add(instance);
            @Y_Button.started += instance.OnY_Button;
            @Y_Button.performed += instance.OnY_Button;
            @Y_Button.canceled += instance.OnY_Button;
            @A_Button.started += instance.OnA_Button;
            @A_Button.performed += instance.OnA_Button;
            @A_Button.canceled += instance.OnA_Button;
            @X_Button.started += instance.OnX_Button;
            @X_Button.performed += instance.OnX_Button;
            @X_Button.canceled += instance.OnX_Button;
            @B_Button.started += instance.OnB_Button;
            @B_Button.performed += instance.OnB_Button;
            @B_Button.canceled += instance.OnB_Button;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="RythmGameActions" />
        private void UnregisterCallbacks(IRythmGameActions instance)
        {
            @Y_Button.started -= instance.OnY_Button;
            @Y_Button.performed -= instance.OnY_Button;
            @Y_Button.canceled -= instance.OnY_Button;
            @A_Button.started -= instance.OnA_Button;
            @A_Button.performed -= instance.OnA_Button;
            @A_Button.canceled -= instance.OnA_Button;
            @X_Button.started -= instance.OnX_Button;
            @X_Button.performed -= instance.OnX_Button;
            @X_Button.canceled -= instance.OnX_Button;
            @B_Button.started -= instance.OnB_Button;
            @B_Button.performed -= instance.OnB_Button;
            @B_Button.canceled -= instance.OnB_Button;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="RythmGameActions.UnregisterCallbacks(IRythmGameActions)" />.
        /// </summary>
        /// <seealso cref="RythmGameActions.UnregisterCallbacks(IRythmGameActions)" />
        public void RemoveCallbacks(IRythmGameActions instance)
        {
            if (m_Wrapper.m_RythmGameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="RythmGameActions.AddCallbacks(IRythmGameActions)" />
        /// <seealso cref="RythmGameActions.RemoveCallbacks(IRythmGameActions)" />
        /// <seealso cref="RythmGameActions.UnregisterCallbacks(IRythmGameActions)" />
        public void SetCallbacks(IRythmGameActions instance)
        {
            foreach (var item in m_Wrapper.m_RythmGameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RythmGameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="RythmGameActions" /> instance referencing this action map.
    /// </summary>
    public RythmGameActions @RythmGame => new RythmGameActions(this);
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "SpaceShipMinigame" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="SpaceShipMinigameActions.AddCallbacks(ISpaceShipMinigameActions)" />
    /// <seealso cref="SpaceShipMinigameActions.RemoveCallbacks(ISpaceShipMinigameActions)" />
    public interface ISpaceShipMinigameActions
    {
        /// <summary>
        /// Method invoked when associated input action "Move" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMove(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Fire" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnFire(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Shield" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnShield(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ChangeWeapon1" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnChangeWeapon1(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ChangeWeapon2" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnChangeWeapon2(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ChangeWeapon3" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnChangeWeapon3(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "RythmGame" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="RythmGameActions.AddCallbacks(IRythmGameActions)" />
    /// <seealso cref="RythmGameActions.RemoveCallbacks(IRythmGameActions)" />
    public interface IRythmGameActions
    {
        /// <summary>
        /// Method invoked when associated input action "Y_Button" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnY_Button(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "A_Button" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnA_Button(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "X_Button" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnX_Button(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "B_Button" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnB_Button(InputAction.CallbackContext context);
    }
}
